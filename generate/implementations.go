package main

import (
	"io"
	"os"

	"github.com/mrz1836/go-countries/data"
)

// EmbeddedDataLoader provides access to the embedded JSON data
type EmbeddedDataLoader struct{}

// LoadISO3166Data returns the embedded ISO 3166 data
func (e *EmbeddedDataLoader) LoadISO3166Data() ([]byte, error) {
	return []byte(data.ISO3166JSONData), nil
}

// LoadCurrencyData returns the embedded currency data
func (e *EmbeddedDataLoader) LoadCurrencyData() ([]byte, error) {
	return []byte(data.CountryCurrencyJSONData), nil
}

// OSFileWriter provides file operations using the OS filesystem
type OSFileWriter struct{}

// Create creates a new file at the specified path
func (o *OSFileWriter) Create(filename string) (io.WriteCloser, error) {
	return os.Create(filename) //nolint:gosec // filename is controlled by the caller
}

// DefaultTemplateProvider provides the default package template
type DefaultTemplateProvider struct{}

// GetPackageTemplate returns the default package template string
func (d *DefaultTemplateProvider) GetPackageTemplate() (string, error) {
	return `// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .URL }}
package countries

var (
	countries = []*Country{
	{{- range .Countries }}
		{
			Alpha2:                 {{ printf "%q" .Alpha2 }},
			Alpha3:                 {{ printf "%q" .Alpha3 }},
			Capital:             	{{ printf "%q" .Capital }},
			ContinentName:          {{ printf "%q" .ContinentName }},
			CountryCode:            {{ printf "%q" .CountryCode }},
			CurrencyCode:           {{ printf "%q" .CurrencyCode }},
			IntermediateRegion:     {{ printf "%q" .IntermediateRegion }},
			IntermediateRegionCode: {{ printf "%q" .IntermediateRegionCode }},
			ISO31662:               {{ printf "%q" .ISO31662 }},
			Name:                   {{ printf "%q" .Name }},
			Region:                 {{ printf "%q" .Region }},
			RegionCode:             {{ printf "%q" .RegionCode }},
			SubRegion:              {{ printf "%q" .SubRegion }},
			SubRegionCode:          {{ printf "%q" .SubRegionCode }},
		},
        {{- end }}
        }

        byName = map[string]*Country{
        {{- range $index, $c := .Countries }}
                {{ printf "%q" (lower $c.Name) }}: countries[{{ $index }}],
        {{- end }}
        }

        byAlpha2 = map[string]*Country{
        {{- range $index, $c := .Countries }}
                {{ printf "%q" $c.Alpha2 }}: countries[{{ $index }}],
        {{- end }}
        }

        byAlpha3 = map[string]*Country{
        {{- range $index, $c := .Countries }}
                {{ printf "%q" $c.Alpha3 }}: countries[{{ $index }}],
        {{- end }}
        }

        byCode = map[string]*Country{
        {{- range $index, $c := .Countries }}
                {{ printf "%q" $c.CountryCode }}: countries[{{ $index }}],
        {{- end }}
        }

        byCapital = map[string]*Country{
        {{- range $_, $pair := .Capitals }}
                {{ printf "%q" $pair.Key }}: countries[{{ $pair.Index }}],
        {{- end }}
        }

        byISO31662 = map[string]*Country{
        {{- range $index, $c := .Countries }}
                {{ printf "%q" $c.ISO31662 }}: countries[{{ $index }}],
        {{- end }}
        }
)`, nil
}
