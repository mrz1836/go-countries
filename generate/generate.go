// The following directive is necessary to make the package coherent:

// +build ignore

// This program generates the structs from JSON
package main

import (
	"encoding/json"
	"log"
	"os"
	"text/template"
	"time"

	"github.com/mrz1836/go-countries"
	"github.com/mrz1836/go-countries/data"
)

func main() {

	// Unmarshall the countries
	var c countries.CountryList
	if err := json.Unmarshal([]byte(data.CountryJSONData), &c); err != nil {
		log.Panic("failed to load countries", err.Error())
	}

	// Repo URL
	const url = "https://github.com/mrz1836/go-countries"

	// Create the file or overwrite
	f, err := os.Create("countries_data.go")
	if err != nil {
		log.Fatal(err)
	}

	// Close the file
	defer func() {
		_ = f.Close()
	}()

	// Execute the template
	packageTemplate.Execute(f, struct {
		Timestamp time.Time
		URL       string
		Countries countries.CountryList
	}{
		Timestamp: time.Now(),
		URL:       url,
		Countries: c,
	})
}

// Template for the generated code
var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}
// using data from
// {{ .URL }}
package countries

var (
	countries = []*Country{
	{{- range .Countries }}
		{
			Alpha2:                 {{ printf "%q" .Alpha2 }},
			Alpha3:                 {{ printf "%q" .Alpha3 }},
			CountryCode:            {{ printf "%q" .CountryCode }},
			IntermediateRegion:     {{ printf "%q" .IntermediateRegion }},
			IntermediateRegionCode: {{ printf "%q" .IntermediateRegionCode }},
			ISO31662:               {{ printf "%q" .ISO31662 }},
			Name:                   {{ printf "%q" .Name }},
			Region:                 {{ printf "%q" .Region }},
			RegionCode:             {{ printf "%q" .RegionCode }},
			SubRegion:              {{ printf "%q" .SubRegion }},
			SubRegionCode:          {{ printf "%q" .SubRegionCode }},
		},
	{{- end }}
	}
)
`))
